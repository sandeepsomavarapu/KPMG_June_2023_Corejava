

Language:
=========

		Communication with human
		
Programming Language:
=====================
		Communication with Machine

		c,c++,python,.net,java....

		POP									OOP
B,BCPL,C,COBOL,PHOTON,PASCAL....		C++,.net,Python,java,lisp,smalltalk....	


OOPS-->4 features
	
			1)Performance	Inheritance(extends,implements),polymorphisam(method overloading &overriding)		
			2)Security		Abstraction(abstract class,interface),Encapsualion(data&methods together)
			

OOPS --->OOPL

										Microsoft
Why  JAVA ?								.net

									machine1 		machine2
									windows11
									.net			linux	
										
		1)Platform Independent (WORA)		
		2)Garbage Collection
		
		
		Welcome to java world
		
		
		Java -->1996 -->Sun micro system-->Oracle ---->james gosling 
				
		
		java 20
		
		https://www.javatpoint.com/javafx-how-to-install-java
		
		
				keywords 53--->lower case 
		
		
	Identifiers:
================

			a-z
			A-Z
			0-9
			$
			_
			
53			
	Variables:
	==========
			sandeep javafsd 43243243242
		syntax:
		
		
			datatype varname=value
		
		Premitive DT 		Non-Premitive		
		
		8 PDT					Array,String,Employee....
		

		byte 		1 byte		-128 to 127
		short		2 bytes		-32768 to 32767
		int			4 bytes		-2147483648 to 2147483647
		long		8 bytes		-2 power  63 to (2 power 63) -1
								-9223372036854775808 to 9223372036854775807
											byte age=32;  long age=22;  byte contactno=9494949494
		float       4 bytes    21.32424234234234
		double		8 bytes
		
		char        2 bytes		ASCII  A-65 a-97 18 
		boolean		1 bit	
		

		local variables
		global variables:instance variable,static variable
		
		how much memory:depends on the datatype
		where ?		: instance->heap,static--->method area,local-->stack area
		when ?
		

	JDK,JRE,JVM	
		
		JVM Architecture:
		================= 
			1)CLSS		.class	loading ..    jar file?   zip file
			2)memory areas
			3)execution engine
		
		
		method area:all static properties(variable,method,block)
		heap area  :all instance properties 
		stack area: all local variables
		
	
		4 key points	
		
syntax:
		static  :static keyword
		instance:if there is no static ie instance 
		
		
		
memory
			how much memory:depends on the datatype
			where ?		: instance->heap,static--->method area,local-->stack area
			when ?

		static variables will get memory space ONLY ONCE at the time class loading into JVM
		instance variables will get memory space for every object creation

		class	A{
		
		classname objname=new classname();
		A obj=new A();
		}
		TREE,CAR
		mango tree,banana tree...huyndai,toyota
Access
			static variables/methods can be accessed by using classname 
			instance properties can be accessed by using objref name 


usage 		

			to represent common data like schoolname,clg name,org name,country name...static 
			to represent unique data  like mobileno,aadhar,pan,accno,empid,stdid,....instance
		
		
		class is a collection data members+ member functions
		
		object is instance of a class
		
		
IDE
		eclipse,netbeans,myeclipse,intellji....
		
		
				JAVA
		JSE		 JEE	JME		
		
		
		standalone/desktop applications  corejava,awt,swings,applets....
		
		web applications  				servlets,jsp,mvc,spring,jpa.....
		
		distributed applications		webservices
		
		mobile applications				android


package,import 




package :folder


		predefined 
		userdefined 
	

NOTE:
		By Default package for every java file is java.lang 
		BY Default parent class for every java class  is java.lang.Object


AccessModifier static/instance returntype methodname(param1,param2...) 
{



}
	public static void main(String[] args) {

	}


Flow Control:
===============

	if,else,for,while,do while,switch,case,default,break,continue
	
	
	
	
	
	
	
	
	
	hi,hello,hi,error,hello
	
	Day-3 21-06-2023
	================
	
	variables,identifiers
	
	syntax:
			static
			no keyword-->instance
	memory:
			heap area-instance-->at the time object creation
			method area-->static -->at the time of class loading into JVM
	
	Access:
			instance --->Object ref
			static   --->classname 			
	
	Usage 	
			static-->common properties
			instance-->unique properties
	
	Datatypes	
	
	
	flow control
	
	
	OOPS Features:
	==============
	
		Inheritance
		polymorphisam
		encapsulation
		abstration
	
	
	Inheritance:
	============= Code Reusability-->performance
	
	the process of equiring/getting properties from one class to another class 
	
	Code Reusability

extends,implements
	
	class Test
	{
	 //30 methods
	
	
	}
	
	
	class MyClass extends Test			 class A
	{
	//20 methods 
	
	}
	

abstract,concrete methods, class,abstract class,interfaces,abstraction,MI
Polymorphisam(overloading,overriding),final,constructor,this,super,encapsulation

public,private,protected,default




Methods:
		instance,static 


	method signature + method body-->concrete method

	with out body+method signature-->abstract method



class			: its a collection only concrete methods
abstract class	: its a combination of both abstract and concrete methods
interface		: its a collection o only abstract methods



			abstraction:Abstract classes(0-100 %),interfaces(100%)


Multiple inheritance:

MI Not supported by java @ class level
MI supported by java through interfaces 


interface  A			interface  B
{					{

public void m1();		public void m1();



}					}


class C implements A,B
{
public static void main(String args[])
{
	C c=new C();
	c.m1();
	

}
public void m1()
{
......
}
}

Polymorphisam:
================

many forms 


	method overloading ,method overriding
	
	
Method Overloading
===================	

	method name is same but signature is different 

								no of params
								order of params
								type of params


	Method Overiding 
	
		method name is same implementation is different




		Final:variable,method,class



constructor:
============

	constructor is a special member function(method)

			1)instantiation of a class 
			
			class A
			{
			
			
			}
			
			
			classname objname=new classname();
			
			classname objname=new constructor();
			
				A obj=new A();
				
				

this is used to represent current class properties(variable,method,constructor,object)

super is used to represent parent class properties





public 		:Every where  we can access

private		:class level scope

protected	: inside the package everywhere outside the package only when child

default		:package level scope



Encapsulation:
==============
	Encapsulation is a process of wrapping the datamembers(variables) and member functions(methods) 


													private data 		and public methods setters and getters 
													
Scanner
=========													
						java.util
						
						dynamic input
						
String,StringBuffer,StringBuilder						--->java.lang
						
	to represent group chars 
	
	
	String is immutable
	
	StringBuffer and StringBuilder are muttable
	
	SBuffer-->synchronized
	SBuilder-->Not Synchronized


					
DAY-5:

Exception Handling:
===================

Limitations without exception handling

	1)System defined error message 
	2)abnormal termination



Two Advantages with exception handling

	1)user friendly  error message 
	2)normal termination


Exception handling is mechanisam of converting system defined error messages into user friendly error messages 
	


	try,catch,finally,throw,throws

	
		try--->error code 
	catch	-->Handling code
	finally -->cleanup code
	throw	-->to throw an exception
	throws	-->to give info to the caller 



try,catch,finally,throw,throws



	try{
	
	}
	catch()
	{
	
	}
	finally{
	
	}

throw,throws,user defined exception

AE

throw :

if(age<18)
{
throw new AE("age cant be lessthan 18");
}

throws--->info to the caller 



User defined exception

1)class AgeNotValid extends Exception/Throwable/RuntimeException

2)param constructor


	
Day-6:
=======

File IO
========
		input output

		create file,write ,read
		
		java.io

stream of data	--> flow of data	
		java.io
		character stream	File,FileWriter,BufferedWriter,PrintWriter(println),FileReader,BufferedReader
		byte stream -->2bytes	FileOutputStream,FileInputStream
		data stream	-->			DataOutputStream,DataInputStream
		object stream			ObjectOutputStream,ObjectInputStream
		buffered stream -->1024 bytes BufferedOutputStream,BufferedInputStream




EMployee,product,---->file

Serialization-->the process of converting object data to byte data 
De-Serialization-->the process of converting byte data to object data 


MultiThreading:
----------------
	multi tasking:Executing several tasks simultaneously 


		process based multi tasking :
				executing several tasks simultaneously where each task seperate independent process 
			
		thread based multi tasking (multi threading)

				executing several tasks simultaneously where each and every task belongs to same process 
 
 Process:group of threads 

	thread :a smallest unit of process
	
	
	2 ways 
		
		1)extends Thread
		2)implements Runnable		run()
		
		
		default thread-->main
		
		
		thread scheduler-->priorities
		
		1-10
			
		main thread-5		-->main
		child thread -->extended from main -->thread-0
		
		
		
		public void m1()
		{
		
		
		//no thread safety 
		
		}
										at a time only one thread is allowed access 
		public synchronized void m2()
		{
	
		//thread safety
	
	
		}
	
	


https://www.javamadesoeasy.com/2015/03/thread-states-thread-life-cycle-in-java.html



Collections
============

		variable-->name given to the memory location
	
		int id=123;
		id=234;

		arrays
		
			group of objects

		int ids[]={23,43,22,55,775,90,88};

		float marks[]=new int[10];//AIOE

			
			index

Arrays:
=======
		1)arrays can hold only homogeneous data(similar data)
		2)arrays are fixed in size AIOE
		3)no utility methods


Collections		
===========

		1)collections can hold both homogeneous and heterogeneous data(similar data)
		2)collections are not fixed in size  AL-10,16
		3)100's utility methods



collections framework(ready made)


		Collection						MAP
List 		Set      Queue					
	


			List					Set						Map
				-->AL					-->HS					-->HM
				-->LL					-->LHS					-->LHM
				-->Vector						-->TS				-->TM
					-->Stack

								Comparable,Comparator


List:
-----
		-->duplicates are allowed 
		-->insertion order is preserved 
		
		java.util
		
		
		
		ArrayList  			 Vector(legaccy)
	not-synchronized		synchronized
	no thread safety		thread safety 
	
	
			Stack-->FILO
	
		
			Queue-->FIFO
			
		ArrayList 

		

		LinkedList
	
	

Set:
-----
		-->duplicates are not allowed 
		-->insertion order is not followed 
			
	
	
Comparable vs Comparator 	
=========================
	
	interface-->any no of public abstract
	FI		-->SAM
	MI
	Comparable-->FI-->compareTo-->NSO
	 returns -ve if obj1 has to come before obj2
	 returns +ve if obj1 has to come after obj2
	 returns 0 if both are same
	 
	 java.util.Comparator-->CSO-->FI-->compare()

MAP:
=====

	map is collection of entries
	entry-->key,value











































Collections


Multi threading 


JAVA8 features



Git hub



















