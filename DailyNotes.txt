

Language:
=========

		Communication with human
		
Programming Language:
=====================
		Communication with Machine

		c,c++,python,.net,java....

		POP									OOP
B,BCPL,C,COBOL,PHOTON,PASCAL....		C++,.net,Python,java,lisp,smalltalk....	


OOPS-->4 features
	
			1)Performance	Inheritance,polymorphisam		
			2)Security		Abstraction,Encapsualion
			

OOPS --->OOPL

										Microsoft
Why  JAVA ?								.net

									machine1 		machine2
									windows11
									.net			linux	
										
		1)Platform Independent (WORA)		
		2)Garbage Collection
		
		
		Welcome to java world
		
		
		Java -->1996 -->Sun micro system-->Oracle ---->james gosling 
				
		
		java 20
		
		https://www.javatpoint.com/javafx-how-to-install-java
		
		
				keywords 53--->lower case 
		
		
	Identifiers:
================

			a-z
			A-Z
			0-9
			$
			_
			
53			
	Variables:
	==========
			sandeep javafsd 43243243242
		syntax:
		
		
			datatype varname=value
		
		Premitive DT 		Non-Premitive		
		
		8 PDT					Array,String,Employee....
		

		byte 		1 byte		-128 to 127
		short		2 bytes		-32768 to 32767
		int			4 bytes		-2147483648 to 2147483647
		long		8 bytes		-2 power  63 to (2 power 63) -1
								-9223372036854775808 to 9223372036854775807
											byte age=32;  long age=22;  byte contactno=9494949494
		float       4 bytes    21.32424234234234
		double		8 bytes
		
		char        2 bytes		ASCII  A-65 a-97 18 
		boolean		1 bit	
		

		local variables
		global variables:instance variable,static variable
		
		how much memory:depends on the datatype
		where ?		: instance->heap,static--->method area,local-->stack area
		when ?
		

	JDK,JRE,JVM	
		
		JVM Architecture:
		================= 
			1)CLSS		.class	loading ..    jar file?   zip file
			2)memory areas
			3)execution engine
		
		
		method area:all static properties(variable,method,block)
		heap area  :all instance properties 
		stack area: all local variables
		
	
		4 key points	
		
syntax:
		static  :static keyword
		instance:if there is no static ie instance 
		
		
		
memory
			how much memory:depends on the datatype
			where ?		: instance->heap,static--->method area,local-->stack area
			when ?

		static variables will get memory space ONLY ONCE at the time class loading into JVM
		instance variables will get memory space for every object creation

		class	A{
		
		classname objname=new classname();
		A obj=new A();
		}
		TREE,CAR
		mango tree,banana tree...huyndai,toyota
Access
			static variables/methods can be accessed by using classname 
			instance properties can be accessed by using objref name 


usage 		

			to represent common data like schoolname,clg name,org name,country name...static 
			to represent unique data  like mobileno,aadhar,pan,accno,empid,stdid,....instance
		
		
		class is a collection data members+ member functions
		
		object is instance of a class
		
		
IDE
		eclipse,netbeans,myeclipse,intellji....
		
		
				JAVA
		JSE		 JEE	JME		
		
		
		standalone/desktop applications  corejava,awt,swings,applets....
		
		web applications  				servlets,jsp,mvc,spring,jpa.....
		
		distributed applications		webservices
		
		mobile applications				android


package,import 




package :folder


		predefined 
		userdefined 
	

NOTE:
		By Default package for every java file is java.lang 
		BY Default parent class for every java class  is java.lang.Object


AccessModifier static/instance returntype methodname(param1,param2...) 
{



}
	public static void main(String[] args) {

	}


Flow Control:
===============

	if,else,for,while,do while,switch,case,default,break,continue
	
	
	
	
	
	
	
	
	
	hi,hello,hi,error,hello
	
	Day-3 21-06-2023
	================
	
	variables,identifiers
	
	syntax:
			static
			no keyword-->instance
	memory:
			heap area-instance-->at the time object creation
			method area-->static -->at the time of class loading into JVM
	
	Access:
			instance --->Object ref
			static   --->classname 			
	
	Usage 	
			static-->common properties
			instance-->unique properties
	
	Datatypes	
	
	
	flow control
	
	
	OOPS Features:
	==============
	
		Inheritance
		polymorphisam
		encapsulation
		abstration
	
	
	Inheritance:
	============= Code Reusability-->performance
	
	the process of equiring/getting properties from one class to another class 
	
	Code Reusability

extends,implements
	
	class Test
	{
	 //30 methods
	
	
	}
	
	
	class MyClass extends Test			 class A
	{
	//20 methods 
	
	}
	
	
Multiple inheritance:

MI Not supported by java @ class level
MI supported by java through interfaces 




abstract,concrete,class,abstract class,interfaces,abstraction,MI,Polymorphisam(overloading,overriding),final,constructor,this,super,encapsulation

public,private,protected,default











